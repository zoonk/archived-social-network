rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    function isModerator() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'moderator';
    }

    function isOneOf(field, values) {
      return request.resource.data[field].matches(values);
    }

    function isReadOnly(field) {
      return !(field in request.resource.data) || request.resource.data[field] == resource.data[field];
    }

    function isValidPostCategory() {
      return isOneOf('category', 'books|courses|examples|lessons|posts|questions|references');
    }

    function isValidLanguage() {
      return isOneOf('language', 'en|pt');
    }

    function isValidProfile(field) {
      return get(/databases/$(database)/documents/profile/$(request.auth.uid)).data.bio == request.resource.data[field].bio
        && get(/databases/$(database)/documents/profile/$(request.auth.uid)).data.name == request.resource.data[field].name
        && get(/databases/$(database)/documents/profile/$(request.auth.uid)).data.photo == request.resource.data[field].photo
        && get(/databases/$(database)/documents/profile/$(request.auth.uid)).data.username == request.resource.data[field].username
      ;
    }

    match /{category}/{categoryId}/followers/{userId} {
      allow get;
      allow list: if request.query.limit <= 20;
      allow create, delete: if request.auth.uid == userId;
    }

    match /{category}/{categoryId}/likes/{createdById} {
      allow get, create, update: if request.auth.uid == createdById;
    }

    match /{category}/{categoryId}/leaderboard/{createdById} {
      allow get;
      allow list: if request.query.limit <= 20;
    }

    match /activity/{id} {
      allow get;
      allow list: if request.query.limit <= 20;
    }

    match /admin/{id} {
      allow get: if isAdmin();
    }

    match /chapters/{id} {
      allow get;
      allow list;
      allow create:
        if request.auth.uid != null
        && get(/databases/$(database)/documents/topics/$(request.resource.data.topics[0])).data.chapters.size() < 20
        && request.resource.data.comments == 0
        && request.resource.data.createdAt == request.time
        && isValidProfile('createdBy')
        && request.resource.data.createdById == request.auth.uid
        && request.resource.data.description is string
        && request.resource.data.description.size() <= 1000
        && request.resource.data.examples is list
        && request.resource.data.examples.size() <= 20
        && request.resource.data.lessons is list
        && request.resource.data.lessons.size() <= 20
        && request.resource.data.likes == 0
        && request.resource.data.title is string
        && request.resource.data.topics is list
        && request.resource.data.topics[0] is string
        && request.resource.data.updatedAt == request.time
        && isValidProfile('updatedBy')
        && request.resource.data.updatedById == request.auth.uid
        && isValidLanguage()
      ;
      allow update:
        if request.auth.uid != null
        && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['description', 'examples', 'lessons', 'title', 'topics', 'updatedAt', 'updatedBy', 'updatedById'])
        && request.resource.data.description is string
        && request.resource.data.description.size() <= 1000
        && request.resource.data.examples.hasOnly(resource.data.examples)
        && request.resource.data.lessons.hasOnly(resource.data.lessons)
        && request.resource.data.title is string
        && request.resource.data.topics is list
        && request.resource.data.topics[0] is string
        && request.resource.data.updatedAt == request.time
        && isValidProfile('updatedBy')
        && request.resource.data.updatedById == request.auth.uid
      ;
      allow delete:
        if isAdmin()
        || isModerator()
        || (request.auth.uid == resource.data.createdById && request.auth.uid == resource.data.updatedById);

      match /progress/{userId} {
        allow get, create, update: if request.auth.uid == userId;
      }
    }

    match /comments/{commentId} {
      allow list;
      allow get;
      allow create:
        if request.auth.uid != null
        && isOneOf('category', 'comments|replies')
        && (request.resource.data.commentId is string || request.resource.data.category == 'comments')
        && request.resource.data.content is string
        && request.resource.data.createdAt == request.time
        && isValidProfile('createdBy')
        && request.resource.data.createdById == request.auth.uid
        && request.resource.data.likes == 0
        && exists(/databases/$(database)/documents/posts/$(request.resource.data.postId))
        && request.resource.data.replies == 0
        && request.resource.data.topics == get(/databases/$(database)/documents/posts/$(request.resource.data.postId)).data.topics
        && request.resource.data.updatedAt == request.time
        && isValidProfile('updatedBy')
        && request.resource.data.updatedById == request.auth.uid
        && isValidLanguage()
      ;
      allow delete:
        if request.auth.uid == resource.data.createdById
        || isModerator()
        || isAdmin()
      ;
    }

    match /feedback/{id} {
      allow read: if isAdmin();
      allow create: if request.auth == null || request.auth.uid == request.resource.data.uid;
    }

    match /groups/{id} {
      allow get;
      allow list: if request.query.limit <= 20;
      allow create:
        if request.auth.uid != null
        && request.resource.data.comments == 0
        && request.resource.data.createdAt == request.time
        && isValidProfile('createdBy')
        && request.resource.data.createdById == request.auth.uid
        && request.resource.data.description is string
        && request.resource.data.likes == 0
        && request.resource.data.followers == 0
        && (request.resource.data.photo == null || request.resource.data.photo is string)
        && request.resource.data.pinned is list
        && request.resource.data.title is string
        && request.resource.data.topics is list
        && request.resource.data.topics[0] is string
        && request.resource.data.updatedAt == request.time
        && isValidProfile('updatedBy')
        && request.resource.data.updatedById == request.auth.uid
        && isValidLanguage()
      ;
      allow update:
        if request.resource.data.diff(resource.data).affectedKeys().hasOnly(['description', 'photo', 'pinned', 'title', 'topics', 'updatedAt', 'updatedBy', 'updatedById'])
        && request.resource.data.description is string
        && request.resource.data.description.size() <= 1000
        && request.resource.data.pinned.hasOnly(resource.data.pinned)
        && (request.resource.data.photo == null || request.resource.data.photo is string)
        && request.resource.data.title is string
        && request.resource.data.topics is list
        && request.resource.data.topics[0] is string
        && request.resource.data.updatedAt == request.time
        && isValidProfile('updatedBy')
        && request.resource.data.updatedById == request.auth.uid
      ;
      allow delete:
        if isAdmin()
        || isModerator()
        || (request.auth.uid == resource.data.createdById && request.auth.uid == resource.data.updatedById);
    }

    match /leaderboard/{createdById} {
      allow get;
      allow list: if request.query.limit <= 20;
    }

    match /posts/{activityId} {
      allow get;
      allow list: if request.query.limit <= 50;
      allow create:
        if request.auth.uid != null
        && isValidPostCategory()
        && (request.resource.data.chapterId == null || get(/databases/$(database)/documents/chapters/$(request.resource.data.chapterId)).data[request.resource.data.category].size() < 20)
        && request.resource.data.comments == 0
        && request.resource.data.content is string
        && request.resource.data.createdAt == request.time
        && isValidProfile('createdBy')
        && request.resource.data.createdById == request.auth.uid
        && !('editors' in request.resource.data)
        && !('editorsData' in request.resource.data)
        && (request.resource.data.groupId == null || exists(/databases/$(database)/documents/groups/$(request.resource.data.groupId)))
        && isValidLanguage()
        && request.resource.data.likes == 0
        && (request.resource.data.links == null || request.resource.data.links.size() == 0 || (request.resource.data.links is list && request.resource.data.links[0] is string))
        && (request.resource.data.groupId == null || !request.resource.data.pinned || get(/databases/$(database)/documents/groups/$(request.resource.data.groupId)).data.pinned.size() < 20)
        && request.resource.data.title is string
        && request.resource.data.topics is list
        && request.resource.data.topics[0] is string
        && request.resource.data.updatedAt == request.time
        && isValidProfile('updatedBy')
        && request.resource.data.updatedById == request.auth.uid
      ;
      allow update:
        if request.auth.uid != null
        && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['chapterId', 'content', 'cover', 'links', 'pinned', 'pinnedComment', 'subtitle', 'title', 'topics', 'updatedAt', 'updatedBy', 'updatedById'])
        && (request.resource.data.chapterId == resource.data.chapterId || request.resource.data.chapterId == null)
        && (!isOneOf('category', 'posts|questions') || resource.data.createdById == request.auth.uid || isAdmin() || isModerator())
        && request.resource.data.content is string
        && (request.resource.data.links == null || request.resource.data.links.size() == 0 || (request.resource.data.links is list && request.resource.data.links[0] is string))
        && (request.resource.data.groupId == null || !request.resource.data.pinned || get(/databases/$(database)/documents/groups/$(request.resource.data.groupId)).data.pinned.size() < 20)
        && (isReadOnly('pinnedComment') || resource.data.createdById == request.auth.uid)
        && request.resource.data.title is string
        && request.resource.data.topics is list
        && request.resource.data.topics[0] is string
        && request.resource.data.updatedAt == request.time
        && isValidProfile('updatedBy')
        && request.resource.data.updatedById == request.auth.uid
      ;
      allow delete:
        if resource.data.createdById == request.auth.uid
        || isAdmin()
        || isModerator() 
      ;
      match /progress/{userId} {
        allow get, create, update: if request.auth.uid == userId;
      }
    }

    match /profile/{createdById} {
      allow get;
      allow list: if request.query.limit == 1;
      allow update:
        if request.auth.uid == createdById
        && !request.resource.data.diff(resource.data).affectedKeys().hasAny(['username'])
      ;
    }

    match /reports/{id} {
      allow read: if isAdmin();
      allow create: if request.auth == null || request.auth.uid == request.resource.data.uid;
    }

    match /topics/{id} {
      allow get;
      allow list: if request.query.limit <= 20;
      allow create:
        if request.auth.uid != null
        && request.resource.data.chapters is list
        && request.resource.data.comments == 0
        && request.resource.data.createdAt == request.time
        && isValidProfile('createdBy')
        && request.resource.data.createdById == request.auth.uid
        && request.resource.data.description is string
        && request.resource.data.likes == 0
        && (request.resource.data.photo == null || request.resource.data.photo is string)
        && request.resource.data.posts == 0
        && request.resource.data.title is string
        && request.resource.data.topics is list
        && request.resource.data.topics[0] is string
        && request.resource.data.updatedAt == request.time
        && isValidProfile('updatedBy')
        && request.resource.data.updatedById == request.auth.uid
        && isValidLanguage()
      ;
      allow update:
        if request.auth.uid != null
        && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['chapters', 'description', 'photo', 'updatedAt', 'updatedBy', 'updatedById'])
        && request.resource.data.chapters.hasOnly(resource.data.chapters)
        && request.resource.data.description is string
        && request.resource.data.description.size() <= 1000
        && (request.resource.data.photo == null || request.resource.data.photo is string)
        && request.resource.data.updatedAt == request.time
        && isValidProfile('updatedBy')
        && request.resource.data.updatedById == request.auth.uid
      ;

      match /progress/{userId} {
        allow read: if request.auth.uid == userId;
      }
    }

    match /usernames/{username} {
      allow get;
      allow create, update:
        if request.auth.uid != null
        && request.resource.data.uid == request.auth.uid
        && username.matches('^[a-z0-9][a-z0-9_]*([.][a-z0-9_]+)*$')
      ;
    }

    match /users/{userId} {
      allow read: if request.auth.uid == userId;
      allow create, update: if
        request.auth.uid == userId
        && !request.resource.data.diff(resource.data).affectedKeys().hasAny(['bio', 'name', 'photo', 'role', 'username'])
      ;

      match /{subcollection}/{groupId} {
        allow read: if request.auth.uid == userId;
      }
    }
  }
}
